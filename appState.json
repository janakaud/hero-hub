{
  "EDITOR_STATE": {
    "allProjectFiles": {
      "00221894-f8e2-45ae-85c8-e24aba83e6fc": {
        "id": "00221894-f8e2-45ae-85c8-e24aba83e6fc",
        "parent": null,
        "name": "hero-hub",
        "type": "DIRECTORY",
        "isDirectory": true,
        "children": [
          "7125ce41-693a-42d2-b393-e0d8f1ed4ffe",
          "2c1f2126-585c-4405-acb7-a2b1d7bc3eb2"
        ],
        "isRemovable": false,
        "filePath": "hero-hub"
      },
      "7125ce41-693a-42d2-b393-e0d8f1ed4ffe": {
        "id": "7125ce41-693a-42d2-b393-e0d8f1ed4ffe",
        "parent": "00221894-f8e2-45ae-85c8-e24aba83e6fc",
        "name": "lambda.js",
        "type": "LAMBDA_FILE",
        "isDirectory": false,
        "children": [],
        "isRemovable": true,
        "filePath": "hero-hub/lambda.js",
        "code": "let AWS = require('aws-sdk');\nconst s3 = new AWS.S3();\n\nlet cheerio = require('cheerio');\nlet axios = require('axios');\n\nexports.handler = function (event, context, callback) {\n\tlet csv = [[\"Name\", \"Bio\", \"AWS\", \"LinkedIn\", \"Facebook\", \"Twitter\", \"Other...\"].join(',')];\n\tlet promises = [];\n\n\taxios.get('https://aws.amazon.com/heroes/').then(response => {\n\t\tlet $ = cheerio.load(response.data);\n\t\t$('.row-builder .aws-text-box').find('a').each((k, v) => {\n\n\t\t\tlet url = `https://aws.amazon.com${v.attribs.href}`;\n\t\t\tpromises.push(axios.get(url).then(response => {\n\t\t\t\tlet hero = cheerio.load(response.data);\n\n\t\t\t\tlet name = hero(\".row .title\").eq(1).find('h1').first().text().trim();\n\t\t\t\tlet columns = hero(\".row .column-builder\");\n\t\t\t\tlet bio = `\"${columns.first().text().replace(/\\s{2,}/g, ' ').trim()}\"`;\n\t\t\t\tlet linkedin = '', facebook = '', twitter = '', other = [];\n\n\t\t\t\tcolumns.eq(1).find('a').each((i, a) => {\n\t\t\t\t\tlet link = a.attribs.href;\n\t\t\t\t\tif (link.indexOf('linkedin.') > -1) {\n\t\t\t\t\t\tlinkedin = link;\n\t\t\t\t\t} else if (link.indexOf('facebook.') > -1) {\n\t\t\t\t\t\tfacebook = link;\n\t\t\t\t\t} else if (link.indexOf('twitter.') > -1) {\n\t\t\t\t\t\ttwitter = link;\n\t\t\t\t\t} else if (!other.includes(link)) {\n\t\t\t\t\t\tother.push(link);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tcsv.push([name, bio, url, linkedin, facebook, twitter, ...other].join(','));\n\t\t\t})\n\t\t\t.catch(err => {\n\t\t\t\tcallback(err);\n\t\t\t}));\n\t\t});\n\n\t\tPromise.all(promises).then((result) => {\n\t\t\tconsole.log(`Collected ${csv.length} records`);\n\t\t\ts3.putObject({\n\t\t\t\t\"Body\": csv.join('\\n'),\n\t\t\t\t\"Bucket\": \"temp-playground\",\n\t\t\t\t\"Key\": \"heroes.csv\",\n\t\t\t\t\"ACL\": \"public-read\"\n\t\t\t})\n\t\t\t\t.promise()\n\t\t\t\t.then(data => {\n\t\t\t\t\tcallback(null, data);\n\t\t\t\t})\n\t\t\t\t.catch(err => {\n\t\t\t\t\tcallback(err);\n\t\t\t\t});\n\t\t})\n\t\t.catch(err => {\n\t\t\tcallback(err);\n\t\t});\n\t})\n\t.catch(err => {\n\t\tcallback(err);\n\t});\n}",
        "triggers": [],
        "version": 1,
        "testCases": {
          "e39c7d3a-6f1b-46a6-ba4b-8b2292e4b132": {
            "id": "e39c7d3a-6f1b-46a6-ba4b-8b2292e4b132",
            "name": "test",
            "functionId": "7125ce41-693a-42d2-b393-e0d8f1ed4ffe",
            "event": "{\n    \"key1\": \"value1\",\n    \"key2\": \"value2\",\n    \"key3\": \"value3\"\n}"
          }
        }
      },
      "2c1f2126-585c-4405-acb7-a2b1d7bc3eb2": {
        "id": "2c1f2126-585c-4405-acb7-a2b1d7bc3eb2",
        "parent": "00221894-f8e2-45ae-85c8-e24aba83e6fc",
        "name": "fafa.js",
        "type": "LAMBDA_FILE",
        "isDirectory": false,
        "children": [],
        "isRemovable": true,
        "filePath": "hero-hub/fafa.js",
        "code": "let AWS = require('aws-sdk');\nexports.handler = function(event, context, callback) {\n\n\n\tcallback(null,'Successfully executed');\n}",
        "triggers": []
      }
    },
    "rootNode": "00221894-f8e2-45ae-85c8-e24aba83e6fc",
    "openFiles": [
      "7125ce41-693a-42d2-b393-e0d8f1ed4ffe"
    ],
    "currentFileId": "7125ce41-693a-42d2-b393-e0d8f1ed4ffe",
    "resources": {
      "s3tempPlayground": {
        "name": "s3tempPlayground",
        "type": "S3",
        "config": {
          "mode": 1,
          "bucket": {
            "region": "us-east-1",
            "name": "temp-playground"
          }
        },
        "globallyEditable": false
      }
    },
    "envVariables": [
      {
        "lambdaId": "all",
        "varKey": "SIGMA_AWS_ACC_ID",
        "varValue": "",
        "editable": false,
        "isEditable": false
      }
    ],
    "changes": 10,
    "packageJSON": {
      "dependencies": {
        "aws-sdk": {
          "name": "aws-sdk",
          "version": "2.176.0",
          "notRemovable": true
        },
        "slappforge-sdk": {
          "name": "@slappforge/slappforge-sdk",
          "version": "0.0.3",
          "notRemovable": true,
          "types": "\n                    declare class RDSQueryParams {\n    instanceIdentifier: string;\n    query: string;\n    inserts: Array<any>\n}\n\ndeclare namespace SL.AWS {\n    class RDS {\n        query(params: RDSQueryParams, callback: Function, connection: any): void;\n\n        beginTransaction(params: any, callback: Function): void;\n    }\n\n    class SQS {\n        receiveAndDeleteMessages(params: any, filteringCallBack: Function, deleteCallBack: Function, errorCallBack: Function): void;\n    }\n}\n"
        },
        "cheerio": {
          "name": "cheerio",
          "concatenatedName": "cheerio",
          "downloadsLast30Days": 7150065,
          "downloadsRatio": 0.03750119369541416,
          "humanDownloadsLast30Days": "7.2m",
          "popular": true,
          "version": "1.0.0-rc.2",
          "versions": {
            "0.0.1": "2011-10-08T07:28:34.195Z",
            "0.0.2": "2011-11-01T03:23:31.758Z",
            "0.0.3": "2011-11-01T03:24:37.466Z",
            "0.0.4": "2011-11-01T03:27:34.918Z",
            "0.1.1": "2011-11-01T04:41:36.490Z",
            "0.1.2": "2011-11-01T04:48:23.487Z",
            "0.1.3": "2011-11-01T05:15:23.908Z",
            "0.1.4": "2011-11-01T05:28:03.164Z",
            "0.1.5": "2011-11-01T06:00:52.465Z",
            "0.2.0": "2011-11-01T06:08:39.155Z",
            "0.2.1": "2011-11-06T06:56:10.622Z",
            "0.2.2": "2011-11-10T04:57:58.140Z",
            "0.3.0": "2011-11-20T05:34:41.736Z",
            "0.3.1": "2011-11-26T04:56:06.446Z",
            "0.3.2": "2011-12-02T03:36:41.948Z",
            "0.4.0": "2011-12-19T08:59:49.994Z",
            "0.4.1": "2011-12-19T09:17:23.883Z",
            "0.4.2": "2012-01-17T04:15:16.676Z",
            "0.5.0": "2012-02-05T07:04:53.133Z",
            "0.5.1": "2012-02-05T09:01:19.447Z",
            "0.5.2": "2012-02-05T10:00:57.685Z",
            "0.6.0": "2012-02-07T08:16:03.489Z",
            "0.6.1": "2012-02-12T23:04:11.898Z",
            "0.6.2": "2012-02-13T02:49:34.778Z",
            "0.7.0": "2012-04-09T03:14:43.627Z",
            "0.8.0": "2012-05-28T02:06:50.120Z",
            "0.8.1": "2012-06-03T00:46:17.677Z",
            "0.8.2": "2012-06-12T01:33:47.872Z",
            "0.8.3": "2012-06-12T03:18:10.296Z",
            "0.9.0": "2012-07-24T16:29:13.808Z",
            "0.9.1": "2012-08-03T23:45:31.974Z",
            "0.9.2": "2012-08-10T21:34:13.228Z",
            "0.10.0": "2012-09-24T07:13:07.669Z",
            "0.10.1": "2012-10-03T17:42:48.351Z",
            "0.10.2": "2012-11-17T22:31:40.954Z",
            "0.10.3": "2012-11-18T21:43:33.025Z",
            "0.10.4": "2012-12-17T05:55:17.709Z",
            "0.10.5": "2012-12-18T17:47:58.495Z",
            "0.10.6": "2013-01-29T21:22:54.884Z",
            "0.10.7": "2013-02-11T03:12:08.331Z",
            "0.10.8": "2013-03-11T23:48:11.820Z",
            "0.11.0": "2013-04-22T22:42:27.721Z",
            "0.12.0": "2013-06-09T17:59:09.141Z",
            "0.12.1": "2013-07-31T06:58:53.388Z",
            "0.12.2": "2013-09-04T16:01:06.899Z",
            "0.12.3": "2013-10-05T01:43:49.342Z",
            "0.12.4": "2013-11-12T16:45:43.198Z",
            "0.13.0": "2013-12-30T21:59:53.305Z",
            "0.13.1": "2014-01-07T14:46:19.228Z",
            "0.14.0": "2014-04-01T14:47:26.497Z",
            "0.15.0": "2014-04-08T16:59:15.549Z",
            "0.16.0": "2014-05-09T01:28:44.313Z",
            "0.17.0": "2014-06-10T22:35:55.166Z",
            "0.18.0": "2014-11-06T19:01:31.574Z",
            "0.19.0": "2015-03-21T11:17:36.355Z",
            "0.20.0": "2016-02-01T11:06:37.919Z",
            "0.21.0": "2016-06-12T05:34:11.519Z",
            "0.22.0": "2016-08-23T12:21:40.447Z",
            "1.0.0-rc.1": "2017-05-27T21:02:45.789Z",
            "1.0.0-rc.2": "2017-07-02T17:36:55.384Z"
          },
          "tags": {
            "latest": "1.0.0-rc.2"
          },
          "description": "Tiny, fast, and elegant implementation of core jQuery designed specifically for the server",
          "dependencies": {
            "css-select": "~1.2.0",
            "dom-serializer": "~0.1.0",
            "entities": "~1.1.1",
            "htmlparser2": "^3.9.1",
            "lodash": "^4.15.0",
            "parse5": "^3.0.1"
          },
          "devDependencies": {
            "benchmark": "^2.1.0",
            "coveralls": "^2.11.9",
            "expect.js": "~0.3.1",
            "istanbul": "^0.4.3",
            "jquery": "^3.0.0",
            "jsdom": "^9.2.1",
            "jshint": "^2.9.2",
            "mocha": "^3.1.2",
            "xyz": "~1.1.0"
          },
          "repository": {
            "url": "https://github.com/cheeriojs/cheerio",
            "project": "cheerio",
            "user": "cheeriojs",
            "host": "github.com",
            "path": "",
            "head": "48eae25c93702a29b8cd0d09c4a2dce2f912d1f4",
            "branch": "48eae25c93702a29b8cd0d09c4a2dce2f912d1f4"
          },
          "githubRepo": {
            "user": "cheeriojs",
            "project": "cheerio",
            "path": "",
            "head": "48eae25c93702a29b8cd0d09c4a2dce2f912d1f4"
          },
          "gitHead": "48eae25c93702a29b8cd0d09c4a2dce2f912d1f4",
          "readme": "<h1 align=\"center\">cheerio</h1>\n\n<h5 align=\"center\">Fast, flexible & lean implementation of core jQuery designed specifically for the server.</h5>\n\n<div align=\"center\">\n  <a href=\"http://travis-ci.org/cheeriojs/cheerio\">\n    <img src=\"https://secure.travis-ci.org/cheeriojs/cheerio.svg?branch=master\" alt=\"Travis CI\" />\n  </a>\n  <a href=\"https://coveralls.io/r/cheeriojs/cheerio\">\n    <img src=\"http://img.shields.io/coveralls/cheeriojs/cheerio.svg?branch=master&style=flat\" alt=\"Coverage\" />\n  </a>\n  <a href=\"https://gitter.im/cheeriojs/cheerio?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge\">\n    <img src=\"https://badges.gitter.im/Join%20Chat.svg\" alt=\"Join the chat at https://gitter.im/cheeriojs/cheerio\" />\n  </a>\n  <a href=\"#backers\">\n    <img src=\"https://opencollective.com/cheerio/backers/badge.svg\" alt=\"OpenCollective backers\"/>\n  </a>\n  <a href=\"#sponsors\">\n    <img src=\"https://opencollective.com/cheerio/sponsors/badge.svg\" alt=\"OpenCollective sponsors\"/>\n  </a>\n</div>\n\n<br />\n\n```js\nconst cheerio = require('cheerio')\nconst $ = cheerio.load('<h2 class=\"title\">Hello world</h2>')\n\n$('h2.title').text('Hello there!')\n$('h2').addClass('welcome')\n\n$.html()\n//=> <html><head></head><body><h2 class=\"title welcome\">Hello there!</h2></body></html>\n```\n\n## Installation\n`npm install cheerio`\n\n## Features\n__&#10084; Familiar syntax:__\nCheerio implements a subset of core jQuery. Cheerio removes all the DOM inconsistencies and browser cruft from the jQuery library, revealing its truly gorgeous API.\n\n__&#991; Blazingly fast:__\nCheerio works with a very simple, consistent DOM model. As a result parsing, manipulating, and rendering are incredibly efficient. Preliminary end-to-end benchmarks suggest that cheerio is about __8x__ faster than JSDOM.\n\n__&#10049; Incredibly flexible:__\nCheerio wraps around [parse5](https://github.com/inikulin/parse5) parser and can optionally use @FB55's forgiving [htmlparser2](https://github.com/fb55/htmlparser2/). Cheerio can parse nearly any HTML or XML document.\n\n## Cheerio is not a web browser\n\nCheerio parses markup and provides an API for traversing/manipulating the resulting data structure. It does not interpret the result as a web browser does. Specifically, it does *not* produce a visual rendering, apply CSS, load external resources, or execute JavaScript. If your use case requires any of this functionality, you should consider projects like [PhantomJS](http://phantomjs.org/) or [JSDom](https://github.com/tmpvar/jsdom).\n\n## Job Board\n\nLooking for a career upgrade? Check out the available Node.js & Javascript positions at these innovative companies:\n\n<a href=\"https://astro.netlify.com/automattic\"><img src=\"https://astro.netlify.com/static/automattic.png\"></a>\n<a href=\"https://astro.netlify.com/segment\"><img src=\"https://astro.netlify.com/static/segment.png\"></a>\n<a href=\"https://astro.netlify.com/auth0\"><img src=\"https://astro.netlify.com/static/auth0.png\"/></a>\n\n## API\n\n### Markup example we'll be using:\n\n```html\n<ul id=\"fruits\">\n  <li class=\"apple\">Apple</li>\n  <li class=\"orange\">Orange</li>\n  <li class=\"pear\">Pear</li>\n</ul>\n```\n\nThis is the HTML markup we will be using in all of the API examples.\n\n### Loading\nFirst you need to load in the HTML. This step in jQuery is implicit, since jQuery operates on the one, baked-in DOM. With Cheerio, we need to pass in the HTML document.\n\nThis is the _preferred_ method:\n\n```js\nconst cheerio = require('cheerio');\nconst $ = cheerio.load('<ul id=\"fruits\">...</ul>');\n```\n\nOptionally, you can also load in the HTML by passing the string as the context:\n\n```js\nconst $ = require('cheerio');\n$('ul', '<ul id=\"fruits\">...</ul>');\n```\n\nOr as the root:\n\n```js\nconst $ = require('cheerio');\n$('li', 'ul', '<ul id=\"fruits\">...</ul>');\n```\n\nIf you need to modify parsing options for XML input, you may pass an extra\nobject to `.load()`:\n\n```js\nconst $ = cheerio.load('<ul id=\"fruits\">...</ul>', {\n    xml: {\n      normalizeWhitespace: true,\n    }\n});\n```\n\nThe options in the `xml` object are taken directly from [htmlparser2](https://github.com/fb55/htmlparser2/wiki/Parser-options), therefore any options that can be used in `htmlparser2` are valid in cheerio as well. The default options are:\n\n```js\n{\n    withDomLvl1: true,\n    normalizeWhitespace: false,\n    xmlMode: true,\n    decodeEntities: true\n}\n```\n\nFor a full list of options and their effects, see [this](https://github.com/fb55/DomHandler) and\n[htmlparser2's options](https://github.com/fb55/htmlparser2/wiki/Parser-options).\n\nSome users may wish to parse markup with the `htmlparser2` library, and\ntraverse/manipulate the resulting structure with Cheerio. This may be the case\nfor those upgrading from pre-1.0 releases of Cheerio (which relied on\n`htmlparser2`), for those dealing with invalid markup (because `htmlparser2` is\nmore forgiving), or for those operating in performance-critical situations\n(because `htmlparser2` may be faster in some cases). Note that \"more forgiving\"\nmeans `htmlparser2` has error-correcting mechanisms that aren't always a match\nfor the standards observed by web browsers. This behavior may be useful when\nparsing non-HTML content.\n\nTo support these cases, `load` also accepts a `htmlparser2`-compatible data\nstructure as its first argument. Users may install `htmlparser2`, use it to\nparse input, and pass the result to `load`:\n\n```js\n// Usage as of htmlparser2 version 3:\nconst htmlparser2 = require('htmlparser2');\nconst dom = htmlparser2.parseDOM(document, options);\n\nconst $ = cheerio.load(dom);\n```\n\n### Selectors\n\nCheerio's selector implementation is nearly identical to jQuery's, so the API is very similar.\n\n#### $( selector, [context], [root] )\n`selector` searches within the `context` scope which searches within the `root` scope. `selector` and `context` can be a string expression, DOM Element, array of DOM elements, or cheerio object. `root` is typically the HTML document string.\n\nThis selector method is the starting point for traversing and manipulating the document. Like jQuery, it's the primary method for selecting elements in the document, but unlike jQuery it's built on top of the CSSSelect library, which implements most of the Sizzle selectors.\n\n```js\n$('.apple', '#fruits').text()\n//=> Apple\n\n$('ul .pear').attr('class')\n//=> pear\n\n$('li[class=orange]').html()\n//=> Orange\n```\n\n### Attributes\nMethods for getting and modifying attributes.\n\n#### .attr( name, value )\nMethod for getting and setting attributes. Gets the attribute value for only the first element in the matched set. If you set an attribute's value to `null`, you remove that attribute. You may also pass a `map` and `function` like jQuery.\n\n```js\n$('ul').attr('id')\n//=> fruits\n\n$('.apple').attr('id', 'favorite').html()\n//=> <li class=\"apple\" id=\"favorite\">Apple</li>\n```\n\n> See http://api.jquery.com/attr/ for more information\n\n#### .prop( name, value )\nMethod for getting and setting properties. Gets the property value for only the first element in the matched set.\n\n```js\n$('input[type=\"checkbox\"]').prop('checked')\n//=> false\n\n$('input[type=\"checkbox\"]').prop('checked', true).val()\n//=> ok\n```\n\n> See http://api.jquery.com/prop/ for more information\n\n#### .data( name, value )\nMethod for getting and setting data attributes. Gets or sets the data attribute value for only the first element in the matched set.\n\n```js\n$('<div data-apple-color=\"red\"></div>').data()\n//=> { appleColor: 'red' }\n\n$('<div data-apple-color=\"red\"></div>').data('apple-color')\n//=> 'red'\n\nconst apple = $('.apple').data('kind', 'mac')\napple.data('kind')\n//=> 'mac'\n```\n\n> See http://api.jquery.com/data/ for more information\n\n#### .val( [value] )\nMethod for getting and setting the value of input, select, and textarea. Note: Support for `map`, and `function` has not been added yet.\n\n```js\n$('input[type=\"text\"]').val()\n//=> input_text\n\n$('input[type=\"text\"]').val('test').html()\n//=> <input type=\"text\" value=\"test\"/>\n```\n\n#### .removeAttr( name )\nMethod for removing attributes by `name`.\n\n```js\n$('.pear').removeAttr('class').html()\n//=> <li>Pear</li>\n```\n\n#### .hasClass( className )\nCheck to see if *any* of the matched elements have the given `className`.\n\n```js\n$('.pear').hasClass('pear')\n//=> true\n\n$('apple').hasClass('fruit')\n//=> false\n\n$('li').hasClass('pear')\n//=> true\n```\n\n#### .addClass( className )\nAdds class(es) to all of the matched elements. Also accepts a `function` like jQuery.\n\n```js\n$('.pear').addClass('fruit').html()\n//=> <li class=\"pear fruit\">Pear</li>\n\n$('.apple').addClass('fruit red').html()\n//=> <li class=\"apple fruit red\">Apple</li>\n```\n\n> See http://api.jquery.com/addClass/ for more information.\n\n#### .removeClass( [className] )\nRemoves one or more space-separated classes from the selected elements. If no `className` is defined, all classes will be removed. Also accepts a `function` like jQuery.\n\n```js\n$('.pear').removeClass('pear').html()\n//=> <li class=\"\">Pear</li>\n\n$('.apple').addClass('red').removeClass().html()\n//=> <li class=\"\">Apple</li>\n```\n\n> See http://api.jquery.com/removeClass/ for more information.\n\n#### .toggleClass( className, [switch] )\nAdd or remove class(es) from the matched elements, depending on either the class's presence or the value of the switch argument. Also accepts a `function` like jQuery.\n\n```js\n$('.apple.green').toggleClass('fruit green red').html()\n//=> <li class=\"apple fruit red\">Apple</li>\n\n$('.apple.green').toggleClass('fruit green red', true).html()\n//=> <li class=\"apple green fruit red\">Apple</li>\n```\n\n> See http://api.jquery.com/toggleClass/ for more information.\n\n#### .is( selector )\n#### .is( element )\n#### .is( selection )\n#### .is( function(index) )\nChecks the current list of elements and returns `true` if _any_ of the elements match the selector. If using an element or Cheerio selection, returns `true` if _any_ of the elements match. If using a predicate function, the function is executed in the context of the selected element, so `this` refers to the current element.\n\n### Forms\n\n#### .serializeArray()\n\nEncode a set of form elements as an array of names and values.\n\n```js\n$('<form><input name=\"foo\" value=\"bar\" /></form>').serializeArray()\n//=> [ { name: 'foo', value: 'bar' } ]\n```\n\n### Traversing\n\n#### .find(selector)\n#### .find(selection)\n#### .find(node)\nGet the descendants of each element in the current set of matched elements, filtered by a selector, jQuery object, or element.\n\n```js\n$('#fruits').find('li').length\n//=> 3\n$('#fruits').find($('.apple')).length\n//=> 1\n```\n\n#### .parent([selector])\nGet the parent of each element in the current set of matched elements, optionally filtered by a selector.\n\n```js\n$('.pear').parent().attr('id')\n//=> fruits\n```\n\n#### .parents([selector])\nGet a set of parents filtered by `selector` of each element in the current set of match elements.\n```js\n$('.orange').parents().length\n// => 2\n$('.orange').parents('#fruits').length\n// => 1\n```\n\n#### .parentsUntil([selector][,filter])\nGet the ancestors of each element in the current set of matched elements, up to but not including the element matched by the selector, DOM node, or cheerio object.\n```js\n$('.orange').parentsUntil('#food').length\n// => 1\n```\n\n#### .closest(selector)\nFor each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.\n\n```js\n$('.orange').closest()\n// => []\n$('.orange').closest('.apple')\n// => []\n$('.orange').closest('li')\n// => [<li class=\"orange\">Orange</li>]\n$('.orange').closest('#fruits')\n// => [<ul id=\"fruits\"> ... </ul>]\n```\n\n#### .next([selector])\nGets the next sibling of the first selected element, optionally filtered by a selector.\n\n```js\n$('.apple').next().hasClass('orange')\n//=> true\n```\n\n#### .nextAll([selector])\nGets all the following siblings of the first selected element, optionally filtered by a selector.\n\n```js\n$('.apple').nextAll()\n//=> [<li class=\"orange\">Orange</li>, <li class=\"pear\">Pear</li>]\n$('.apple').nextAll('.orange')\n//=> [<li class=\"orange\">Orange</li>]\n```\n\n#### .nextUntil([selector], [filter])\nGets all the following siblings up to but not including the element matched by the selector, optionally filtered by another selector.\n\n```js\n$('.apple').nextUntil('.pear')\n//=> [<li class=\"orange\">Orange</li>]\n```\n\n#### .prev([selector])\nGets the previous sibling of the first selected element optionally filtered by a selector.\n\n```js\n$('.orange').prev().hasClass('apple')\n//=> true\n```\n\n#### .prevAll([selector])\nGets all the preceding siblings of the first selected element, optionally filtered by a selector.\n\n```js\n$('.pear').prevAll()\n//=> [<li class=\"orange\">Orange</li>, <li class=\"apple\">Apple</li>]\n$('.pear').prevAll('.orange')\n//=> [<li class=\"orange\">Orange</li>]\n```\n\n#### .prevUntil([selector], [filter])\nGets all the preceding siblings up to but not including the element matched by the selector, optionally filtered by another selector.\n\n```js\n$('.pear').prevUntil('.apple')\n//=> [<li class=\"orange\">Orange</li>]\n```\n\n#### .slice( start, [end] )\nGets the elements matching the specified range\n\n```js\n$('li').slice(1).eq(0).text()\n//=> 'Orange'\n\n$('li').slice(1, 2).length\n//=> 1\n```\n\n#### .siblings([selector])\nGets the first selected element's siblings, excluding itself.\n\n```js\n$('.pear').siblings().length\n//=> 2\n\n$('.pear').siblings('.orange').length\n//=> 1\n\n```\n\n#### .children([selector])\nGets the children of the first selected element.\n\n```js\n$('#fruits').children().length\n//=> 3\n\n$('#fruits').children('.pear').text()\n//=> Pear\n```\n\n#### .contents()\nGets the children of each element in the set of matched elements, including text and comment nodes.\n\n```js\n$('#fruits').contents().length\n//=> 3\n```\n\n#### .each( function(index, element) )\nIterates over a cheerio object, executing a function for each matched element. When the callback is fired, the function is fired in the context of the DOM element, so `this` refers to the current element, which is equivalent to the function parameter `element`. To break out of the `each` loop early, return with `false`.\n\n```js\nconst fruits = [];\n\n$('li').each(function(i, elem) {\n  fruits[i] = $(this).text();\n});\n\nfruits.join(', ');\n//=> Apple, Orange, Pear\n```\n\n#### .map( function(index, element) )\nPass each element in the current matched set through a function, producing a new Cheerio object containing the return values. The function can return an individual data item or an array of data items to be inserted into the resulting set. If an array is returned, the elements inside the array are inserted into the set. If the function returns null or undefined, no element will be inserted.\n\n```js\n$('li').map(function(i, el) {\n  // this === el\n  return $(this).text();\n}).get().join(' ');\n//=> \"apple orange pear\"\n```\n\n#### .filter( selector ) <br /> .filter( selection ) <br /> .filter( element ) <br /> .filter( function(index, element) )\n\nIterates over a cheerio object, reducing the set of selector elements to those that match the selector or pass the function's test. When a Cheerio selection is specified, return only the elements contained in that selection. When an element is specified, return only that element (if it is contained in the original selection). If using the function method, the function is executed in the context of the selected element, so `this` refers to the current element.\n\nSelector:\n\n```js\n$('li').filter('.orange').attr('class');\n//=> orange\n```\n\nFunction:\n\n```js\n$('li').filter(function(i, el) {\n  // this === el\n  return $(this).attr('class') === 'orange';\n}).attr('class')\n//=> orange\n```\n\n#### .not( selector ) <br /> .not( selection ) <br /> .not( element ) <br /> .not( function(index, elem) )\n\nRemove elements from the set of matched elements. Given a jQuery object that represents a set of DOM elements, the `.not()` method constructs a new jQuery object from a subset of the matching elements. The supplied selector is tested against each element; the elements that don't match the selector will be included in the result. The `.not()` method can take a function as its argument in the same way that `.filter()` does. Elements for which the function returns true are excluded from the filtered set; all other elements are included.\n\nSelector:\n\n```js\n$('li').not('.apple').length;\n//=> 2\n```\n\nFunction:\n\n```js\n$('li').not(function(i, el) {\n  // this === el\n  return $(this).attr('class') === 'orange';\n}).length;\n//=> 2\n```\n\n#### .has( selector ) <br /> .has( element )\n\nFilters the set of matched elements to only those which have the given DOM element as a descendant or which have a descendant that matches the given selector. Equivalent to `.filter(':has(selector)')`.\n\nSelector:\n\n```js\n$('ul').has('.pear').attr('id');\n//=> fruits\n```\n\nElement:\n\n```js\n$('ul').has($('.pear')[0]).attr('id');\n//=> fruits\n```\n\n#### .first()\nWill select the first element of a cheerio object\n\n```js\n$('#fruits').children().first().text()\n//=> Apple\n```\n\n#### .last()\nWill select the last element of a cheerio object\n\n```js\n$('#fruits').children().last().text()\n//=> Pear\n```\n\n#### .eq( i )\nReduce the set of matched elements to the one at the specified index. Use `.eq(-i)` to count backwards from the last selected element.\n\n```js\n$('li').eq(0).text()\n//=> Apple\n\n$('li').eq(-1).text()\n//=> Pear\n```\n\n#### .get( [i] )\n\nRetrieve the DOM elements matched by the Cheerio object. If an index is specified, retrieve one of the elements matched by the Cheerio object:\n\n```js\n$('li').get(0).tagName\n//=> li\n```\n\nIf no index is specified, retrieve all elements matched by the Cheerio object:\n\n```js\n$('li').get().length\n//=> 3\n```\n\n#### .index()\n#### .index( selector )\n#### .index( nodeOrSelection )\n\nSearch for a given element from among the matched elements.\n\n```js\n$('.pear').index()\n//=> 2\n$('.orange').index('li')\n//=> 1\n$('.apple').index($('#fruit, li'))\n//=> 1\n```\n\n#### .end()\nEnd the most recent filtering operation in the current chain and return the set of matched elements to its previous state.\n\n```js\n$('li').eq(0).end().length\n//=> 3\n```\n\n#### .add( selector [, context] )\n#### .add( element )\n#### .add( elements )\n#### .add( html )\n#### .add( selection )\nAdd elements to the set of matched elements.\n\n```js\n$('.apple').add('.orange').length\n//=> 2\n```\n\n#### .addBack( [filter] )\n\nAdd the previous set of elements on the stack to the current set, optionally filtered by a selector.\n\n```js\n$('li').eq(0).addBack('.orange').length\n//=> 2\n```\n\n### Manipulation\nMethods for modifying the DOM structure.\n\n#### .append( content, [content, ...] )\nInserts content as the *last* child of each of the selected elements.\n\n```js\n$('ul').append('<li class=\"plum\">Plum</li>')\n$.html()\n//=>  <ul id=\"fruits\">\n//      <li class=\"apple\">Apple</li>\n//      <li class=\"orange\">Orange</li>\n//      <li class=\"pear\">Pear</li>\n//      <li class=\"plum\">Plum</li>\n//    </ul>\n```\n\n#### .appendTo( target )\nInsert every element in the set of matched elements to the end of the target.\n\n```js\n$('<li class=\"plum\">Plum</li>').appendTo('#fruits')\n$.html()\n//=>  <ul id=\"fruits\">\n//      <li class=\"apple\">Apple</li>\n//      <li class=\"orange\">Orange</li>\n//      <li class=\"pear\">Pear</li>\n//      <li class=\"plum\">Plum</li>\n//    </ul>\n```\n\n#### .prepend( content, [content, ...] )\nInserts content as the *first* child of each of the selected elements.\n\n```js\n$('ul').prepend('<li class=\"plum\">Plum</li>')\n$.html()\n//=>  <ul id=\"fruits\">\n//      <li class=\"plum\">Plum</li>\n//      <li class=\"apple\">Apple</li>\n//      <li class=\"orange\">Orange</li>\n//      <li class=\"pear\">Pear</li>\n//    </ul>\n```\n\n#### .prependTo( target )\nInsert every element in the set of matched elements to the beginning of the target.\n\n```js\n$('<li class=\"plum\">Plum</li>').prependTo('#fruits')\n$.html()\n//=>  <ul id=\"fruits\">\n//      <li class=\"plum\">Plum</li>\n//      <li class=\"apple\">Apple</li>\n//      <li class=\"orange\">Orange</li>\n//      <li class=\"pear\">Pear</li>\n//    </ul>\n```\n\n#### .after( content, [content, ...] )\nInsert content next to each element in the set of matched elements.\n\n```js\n$('.apple').after('<li class=\"plum\">Plum</li>')\n$.html()\n//=>  <ul id=\"fruits\">\n//      <li class=\"apple\">Apple</li>\n//      <li class=\"plum\">Plum</li>\n//      <li class=\"orange\">Orange</li>\n//      <li class=\"pear\">Pear</li>\n//    </ul>\n```\n\n#### .insertAfter( target )\nInsert every element in the set of matched elements after the target.\n\n```js\n$('<li class=\"plum\">Plum</li>').insertAfter('.apple')\n$.html()\n//=>  <ul id=\"fruits\">\n//      <li class=\"apple\">Apple</li>\n//      <li class=\"plum\">Plum</li>\n//      <li class=\"orange\">Orange</li>\n//      <li class=\"pear\">Pear</li>\n//    </ul>\n```\n\n#### .before( content, [content, ...] )\nInsert content previous to each element in the set of matched elements.\n\n```js\n$('.apple').before('<li class=\"plum\">Plum</li>')\n$.html()\n//=>  <ul id=\"fruits\">\n//      <li class=\"plum\">Plum</li>\n//      <li class=\"apple\">Apple</li>\n//      <li class=\"orange\">Orange</li>\n//      <li class=\"pear\">Pear</li>\n//    </ul>\n```\n\n#### .insertBefore( target )\nInsert every element in the set of matched elements before the target.\n\n```js\n$('<li class=\"plum\">Plum</li>').insertBefore('.apple')\n$.html()\n//=>  <ul id=\"fruits\">\n//      <li class=\"plum\">Plum</li>\n//      <li class=\"apple\">Apple</li>\n//      <li class=\"orange\">Orange</li>\n//      <li class=\"pear\">Pear</li>\n//    </ul>\n```\n\n#### .remove( [selector] )\nRemoves the set of matched elements from the DOM and all their children. `selector` filters the set of matched elements to be removed.\n\n```js\n$('.pear').remove()\n$.html()\n//=>  <ul id=\"fruits\">\n//      <li class=\"apple\">Apple</li>\n//      <li class=\"orange\">Orange</li>\n//    </ul>\n```\n\n#### .replaceWith( content )\nReplaces matched elements with `content`.\n\n```js\nconst plum = $('<li class=\"plum\">Plum</li>')\n$('.pear').replaceWith(plum)\n$.html()\n//=> <ul id=\"fruits\">\n//     <li class=\"apple\">Apple</li>\n//     <li class=\"orange\">Orange</li>\n//     <li class=\"plum\">Plum</li>\n//   </ul>\n```\n\n#### .empty()\nEmpties an element, removing all its children.\n\n```js\n$('ul').empty()\n$.html()\n//=>  <ul id=\"fruits\"></ul>\n```\n\n#### .html( [htmlString] )\nGets an html content string from the first selected element. If `htmlString` is specified, each selected element's content is replaced by the new content.\n\n```js\n$('.orange').html()\n//=> Orange\n\n$('#fruits').html('<li class=\"mango\">Mango</li>').html()\n//=> <li class=\"mango\">Mango</li>\n```\n\n#### .text( [textString] )\nGet the combined text contents of each element in the set of matched elements, including their descendants. If `textString` is specified, each selected element's content is replaced by the new text content.\n\n```js\n$('.orange').text()\n//=> Orange\n\n$('ul').text()\n//=>  Apple\n//    Orange\n//    Pear\n```\n\n#### .wrap( content )\nThe .wrap() function can take any string or object that could be passed to the $() factory function to specify a DOM structure. This structure may be nested several levels deep, but should contain only one inmost element. A copy of this structure will be wrapped around each of the elements in the set of matched elements. This method returns the original set of elements for chaining purposes.\n\n```js\nconst redFruit = $('<div class=\"red-fruit\"></div>')\n$('.apple').wrap(redFruit)\n\n//=> <ul id=\"fruits\">\n//     <div class=\"red-fruit\">\n//      <li class=\"apple\">Apple</li>\n//     </div>\n//     <li class=\"orange\">Orange</li>\n//     <li class=\"plum\">Plum</li>\n//   </ul>\n\nconst healthy = $('<div class=\"healthy\"></div>')\n$('li').wrap(healthy)\n\n//=> <ul id=\"fruits\">\n//     <div class=\"healthy\">\n//       <li class=\"apple\">Apple</li>\n//     </div>\n//     <div class=\"healthy\">\n//       <li class=\"orange\">Orange</li>\n//     </div>\n//     <div class=\"healthy\">\n//        <li class=\"plum\">Plum</li>\n//     </div>\n//   </ul>\n```\n\n#### .css( [propertName] ) <br /> .css( [ propertyNames] ) <br /> .css( [propertyName], [value] ) <br /> .css( [propertName], [function] ) <br /> .css( [properties] )\n\nGet the value of a style property for the first element in the set of matched elements or set one or more CSS properties for every matched element.\n\n### Rendering\nWhen you're ready to render the document, you can use the `html` utility function:\n\n```js\n$.html()\n//=>  <ul id=\"fruits\">\n//      <li class=\"apple\">Apple</li>\n//      <li class=\"orange\">Orange</li>\n//      <li class=\"pear\">Pear</li>\n//    </ul>\n```\n\nIf you want to return the outerHTML you can use `$.html(selector)`:\n\n```js\n$.html('.pear')\n//=> <li class=\"pear\">Pear</li>\n```\n\nBy default, `html` will leave some tags open. Sometimes you may instead want to render a valid XML document. For example, you might parse the following XML snippet:\n\n```xml\nconst $ = cheerio.load('<media:thumbnail url=\"http://www.foo.com/keyframe.jpg\" width=\"75\" height=\"50\" time=\"12:05:01.123\"/>');\n```\n\n... and later want to render to XML. To do this, you can use the 'xml' utility function:\n\n```js\n$.xml()\n//=>  <media:thumbnail url=\"http://www.foo.com/keyframe.jpg\" width=\"75\" height=\"50\" time=\"12:05:01.123\"/>\n```\n\nYou may also render the text content of a Cheerio object using the `text` static method:\n\n```js\nconst $ = cheerio.load('This is <em>content</em>.')\n$.text()\n//=> This is content.\n```\n\nThe method may be called on the Cheerio module itself--be sure to pass a collection of nodes!\n\n```js\nconst $ = cheerio.load('<div>This is <em>content</em>.</div>')\ncheerio.text($('div'))\n//=> This is content.\n```\n\n### Miscellaneous\nDOM element methods that don't fit anywhere else\n\n#### .toArray()\nRetrieve all the DOM elements contained in the jQuery set as an array.\n\n```js\n$('li').toArray()\n//=> [ {...}, {...}, {...} ]\n```\n\n#### .clone() ####\nClone the cheerio object.\n\n```js\nconst moreFruit = $('#fruits').clone()\n```\n\n### Utilities\n\n#### $.root\n\nSometimes you need to work with the top-level root element. To query it, you can use `$.root()`.\n\n```js\n$.root().append('<ul id=\"vegetables\"></ul>').html();\n//=> <ul id=\"fruits\">...</ul><ul id=\"vegetables\"></ul>\n```\n\n#### $.contains( container, contained )\nChecks to see if the `contained` DOM element is a descendant of the `container` DOM element.\n\n#### $.parseHTML( data [, context ] [, keepScripts ] )\nParses a string into an array of DOM nodes. The `context` argument has no meaning for Cheerio, but it is maintained for API compatability.\n\n#### $.load( html[, options ] )\nCreate a querying function, bound to a document created from the provided markup. Note that similar to web browser contexts, this operation may introduce `<html>`, `<head>`, and `<body>` elements. See the previous section titled \"Loading\" for usage information.\n\n### Plugins\n\nOnce you have loaded a document, you may extend the prototype or the equivalent `fn` property with custom plugin methods:\n\n```js\nconst $ = cheerio.load('<html><body>Hello, <b>world</b>!</body></html>');\n$.prototype.logHtml = function() {\n  console.log(this.html());\n};\n\n$('body').logHtml(); // logs \"Hello, <b>world</b>!\" to the console\n```\n\n### The \"DOM Node\" object\n\nCheerio collections are made up of objects that bear some resemblence to [browser-based DOM nodes](https://developer.mozilla.org/en-US/docs/Web/API/Node). You can expect them to define the following properties:\n\n- `tagName`\n- `parentNode`\n- `previousSibling`\n- `nextSibling`\n- `nodeValue`\n- `firstChild`\n- `childNodes`\n- `lastChild`\n\n## Screencasts\n\nhttp://vimeo.com/31950192\n\n> This video tutorial is a follow-up to Nettut's \"How to Scrape Web Pages with Node.js and jQuery\", using cheerio instead of JSDOM + jQuery. This video shows how easy it is to use cheerio and how much faster cheerio is than JSDOM + jQuery.\n\n## Contributors\n\nThese are some of the contributors that have made cheerio possible:\n\n```\nproject  : cheerio\n repo age : 2 years, 6 months\n active   : 285 days\n commits  : 762\n files    : 36\n authors  :\n   293  Matt Mueller            38.5%\n   133  Matthew Mueller         17.5%\n    92  Mike Pennisi            12.1%\n    54  David Chambers          7.1%\n    30  kpdecker                3.9%\n    19  Felix BÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂ¶hm             2.5%\n    17  fb55                    2.2%\n    15  Siddharth Mahendraker   2.0%\n    11  Adam Bretz              1.4%\n     8  Nazar Leush             1.0%\n     7  ironchefpython          0.9%\n     6  Jarno LeppÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂ¤nen         0.8%\n     5  Ben Sheldon             0.7%\n     5  Jos Shepherd            0.7%\n     5  Ryan Schmukler          0.7%\n     5  Steven Vachon           0.7%\n     4  Maciej Adwent           0.5%\n     4  Amir Abu Shareb         0.5%\n     3  jeremy.dentel@brandingbrand.com 0.4%\n     3  Andi Neck               0.4%\n     2  steve                   0.3%\n     2  alexbardas              0.3%\n     2  finspin                 0.3%\n     2  Ali Farhadi             0.3%\n     2  Chris Khoo              0.3%\n     2  Rob Ashton              0.3%\n     2  Thomas Heymann          0.3%\n     2  Jaro Spisak             0.3%\n     2  Dan Dascalescu          0.3%\n     2  Torstein Thune          0.3%\n     2  Wayne Larsen            0.3%\n     1  Timm Preetz             0.1%\n     1  Xavi                    0.1%\n     1  Alex Shaindlin          0.1%\n     1  mattym                  0.1%\n     1  Felix BÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂ¶hm            0.1%\n     1  Farid Neshat            0.1%\n     1  Dmitry Mazuro           0.1%\n     1  Jeremy Hubble           0.1%\n     1  nevermind               0.1%\n     1  Manuel Alabor           0.1%\n     1  Matt Liegey             0.1%\n     1  Chris O'Hara            0.1%\n     1  Michael Holroyd         0.1%\n     1  Michiel De Mey          0.1%\n     1  Ben Atkin               0.1%\n     1  Rich Trott              0.1%\n     1  Rob \"Hurricane\" Ashton  0.1%\n     1  Robin Gloster           0.1%\n     1  Simon Boudrias          0.1%\n     1  Sindre Sorhus           0.1%\n     1  xiaohwan                0.1%\n```\n\n## Cheerio in the real world\n\nAre you using cheerio in production? Add it to the [wiki](https://github.com/cheeriojs/cheerio/wiki/Cheerio-in-Production)!\n\n## Testing\n\nTo run the test suite, download the repository, then within the cheerio directory, run:\n\n```shell\nmake setup\nmake test\n```\n\nThis will download the development packages and run the test suite.\n\n## Special Thanks\n\nThis library stands on the shoulders of some incredible developers. A special thanks to:\n\n__&#8226; @FB55 for node-htmlparser2 & CSSSelect:__\nFelix has a knack for writing speedy parsing engines. He completely re-wrote both @tautologistic's `node-htmlparser` and @harry's `node-soupselect` from the ground up, making both of them much faster and more flexible. Cheerio would not be possible without his foundational work\n\n__&#8226; @jQuery team for jQuery:__\nThe core API is the best of its class and despite dealing with all the browser inconsistencies the code base is extremely clean and easy to follow. Much of cheerio's implementation and documentation is from jQuery. Thanks guys.\n\n__&#8226; @visionmedia:__\nThe style, the structure, the open-source\"-ness\" of this library comes from studying TJ's style and using many of his libraries. This dude consistently pumps out high-quality libraries and has always been more than willing to help or answer questions. You rock TJ.\n\n## License\n\nMIT\n",
          "owner": {
            "name": "cheeriojs",
            "avatar": "https://github.com/cheeriojs.png",
            "link": "https://github.com/cheeriojs"
          },
          "deprecated": false,
          "badPackage": false,
          "homepage": null,
          "license": "MIT",
          "keywords": [
            "htmlparser",
            "jquery",
            "selector",
            "scraper",
            "parser",
            "html"
          ],
          "created": 1318058906299,
          "modified": 1521430063512,
          "lastPublisher": {
            "name": "jugglinmike",
            "email": "mike@mikepennisi.com",
            "avatar": "https://gravatar.com/avatar/ac9a0bd65c9779e079fe3fc3e60bfccc",
            "link": "https://www.npmjs.com/~jugglinmike"
          },
          "owners": [
            {
              "name": "mattmueller",
              "email": "mattmuelle@gmail.com",
              "avatar": "https://gravatar.com/avatar/824b41e6108a22c4c96f50ee23419369",
              "link": "https://www.npmjs.com/~mattmueller"
            },
            {
              "name": "davidchambers",
              "email": "dc@davidchambers.me",
              "avatar": "https://gravatar.com/avatar/5f41fa18e9774f1a2ea7c519f476c348",
              "link": "https://www.npmjs.com/~davidchambers"
            },
            {
              "name": "jugglinmike",
              "email": "mike@mikepennisi.com",
              "avatar": "https://gravatar.com/avatar/ac9a0bd65c9779e079fe3fc3e60bfccc",
              "link": "https://www.npmjs.com/~jugglinmike"
            },
            {
              "name": "feedic",
              "email": "me@feedic.com",
              "avatar": "https://gravatar.com/avatar/e6cc4ecf1b693525d042c3a2e8475c19",
              "link": "https://www.npmjs.com/~feedic"
            }
          ],
          "lastCrawl": "2018-03-20T01:10:00.391Z",
          "popularName": "cheerio",
          "dependents": 6212,
          "humanDependents": "6.2k",
          "changelogFilename": null,
          "objectID": "cheerio",
          "_highlightResult": {
            "name": {
              "value": "<em>cheerio</em>",
              "matchLevel": "full",
              "fullyHighlighted": true,
              "matchedWords": [
                "cherrio"
              ]
            },
            "concatenatedName": {
              "value": "<em>cheerio</em>",
              "matchLevel": "full",
              "fullyHighlighted": true,
              "matchedWords": [
                "cherrio"
              ]
            },
            "description": {
              "value": "Tiny, fast, and elegant implementation of core jQuery designed specifically for the server",
              "matchLevel": "none",
              "matchedWords": []
            },
            "owner": {
              "name": {
                "value": "cheeriojs",
                "matchLevel": "none",
                "matchedWords": []
              }
            },
            "keywords": [
              {
                "value": "htmlparser",
                "matchLevel": "none",
                "matchedWords": []
              },
              {
                "value": "jquery",
                "matchLevel": "none",
                "matchedWords": []
              },
              {
                "value": "selector",
                "matchLevel": "none",
                "matchedWords": []
              },
              {
                "value": "scraper",
                "matchLevel": "none",
                "matchedWords": []
              },
              {
                "value": "parser",
                "matchLevel": "none",
                "matchedWords": []
              },
              {
                "value": "html",
                "matchLevel": "none",
                "matchedWords": []
              }
            ],
            "owners": [
              {
                "name": {
                  "value": "mattmueller",
                  "matchLevel": "none",
                  "matchedWords": []
                }
              },
              {
                "name": {
                  "value": "davidchambers",
                  "matchLevel": "none",
                  "matchedWords": []
                }
              },
              {
                "name": {
                  "value": "jugglinmike",
                  "matchLevel": "none",
                  "matchedWords": []
                }
              },
              {
                "name": {
                  "value": "feedic",
                  "matchLevel": "none",
                  "matchedWords": []
                }
              }
            ],
            "popularName": {
              "value": "<em>cheerio</em>",
              "matchLevel": "full",
              "fullyHighlighted": true,
              "matchedWords": [
                "cherrio"
              ]
            }
          },
          "types": "// Type definitions for Cheerio v0.22.0\n// Project: https://github.com/cheeriojs/cheerio\n// Definitions by: Bret Little <https://github.com/blittle>, VILIC VANE <http://vilic.info>, Wayne Maurer <https://github.com/wmaurer>, Umar Nizamani <https://github.com/umarniz>, LiJinyao <https://github.com/LiJinyao>\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\n\ninterface Cheerio {\n    // Document References\n    // Cheerio https://github.com/cheeriojs/cheerio\n    // JQuery http://api.jquery.com\n\n    [index: number]: CheerioElement;\n    length: number;\n\n    // Attributes\n\n    attr(): {[attr: string]: string};\n    attr(name: string): string;\n    attr(name: string, value: any): Cheerio;\n\n    data(): any;\n    data(name: string): any;\n    data(name: string, value: any): any;\n\n    val(): string;\n    val(value: string): Cheerio;\n\n    removeAttr(name: string): Cheerio;\n\n    has(selector: string): Cheerio;\n    has(element: CheerioElement): Cheerio;\n\n    hasClass(className: string): boolean;\n    addClass(classNames: string): Cheerio;\n\n    removeClass(): Cheerio;\n    removeClass(className: string): Cheerio;\n    removeClass(func: (index: number, className: string) => string): Cheerio;\n\n    toggleClass(className: string): Cheerio;\n    toggleClass(className: string, toggleSwitch: boolean): Cheerio;\n    toggleClass(toggleSwitch?: boolean): Cheerio;\n    toggleClass(func: (index: number, className: string, toggleSwitch: boolean) => string, toggleSwitch?: boolean): Cheerio;\n\n    is(selector: string): boolean;\n    is(element: CheerioElement): boolean;\n    is(element: CheerioElement[]): boolean;\n    is(selection: Cheerio): boolean;\n    is(func: (index: number, element: CheerioElement) => boolean): boolean;\n\n    // Form\n    serialize(): string;\n    serializeArray(): {name: string, value: string}[];\n\n    // Traversing\n    \n    find(selector: string): Cheerio;\n    find(element: Cheerio): Cheerio;\n\n    parent(selector?: string): Cheerio;\n    parents(selector?: string): Cheerio;\n    parentsUntil(selector?: string, filter?: string): Cheerio;\n    parentsUntil(element: CheerioElement, filter?: string): Cheerio;\n    parentsUntil(element: Cheerio, filter?: string): Cheerio;\n\n    prop(name: string): any;\n    prop(name: string, value: any): Cheerio;\n\n    closest(): Cheerio;\n    closest(selector: string): Cheerio;\n\n    next(selector?: string): Cheerio;\n    nextAll(): Cheerio;\n    nextAll(selector: string): Cheerio;\n\n    nextUntil(selector?: string, filter?: string): Cheerio;\n    nextUntil(element: CheerioElement, filter?: string): Cheerio;\n    nextUntil(element: Cheerio, filter?: string): Cheerio;\n\n    prev(selector?: string): Cheerio;\n    prevAll(): Cheerio;\n    prevAll(selector: string): Cheerio;\n\n    prevUntil(selector?: string, filter?: string): Cheerio;\n    prevUntil(element: CheerioElement, filter?: string): Cheerio;\n    prevUntil(element: Cheerio, filter?: string): Cheerio;\n\n    slice(start: number, end?: number): Cheerio;\n\n    siblings(selector?: string): Cheerio;\n\n    children(selector?: string): Cheerio;\n\n    contents(): Cheerio;\n\n    each(func: (index: number, element: CheerioElement) => any): Cheerio;\n    map(func: (index: number, element: CheerioElement) => any): Cheerio;\n\n    filter(selector: string): Cheerio;\n    filter(selection: Cheerio): Cheerio;\n    filter(element: CheerioElement): Cheerio;\n    filter(elements: CheerioElement[]): Cheerio;\n    filter(func: (index: number, element: CheerioElement) => boolean): Cheerio;\n\n    not(selector: string): Cheerio;\n    not(selection: Cheerio): Cheerio;\n    not(element: CheerioElement): Cheerio;\n    not(func: (index: number, element: CheerioElement) => boolean): Cheerio;\n\n    first(): Cheerio;\n    last(): Cheerio;\n\n    eq(index: number): Cheerio;\n\n    get(): string[];\n    get(): CheerioElement[];\n    get(index: number): CheerioElement;\n\n    index(): number;\n    index(selector: string): number;\n    index(selection: Cheerio): number;\n\n    end(): Cheerio;\n\n    add(selectorOrHtml: string): Cheerio;\n    add(selector: string, context: Document): Cheerio;\n    add(element: CheerioElement): Cheerio;\n    add(elements: CheerioElement[]): Cheerio;\n    add(selection: Cheerio): Cheerio;\n\n    addBack():Cheerio;\n    addBack(filter: string):Cheerio;\n\n    // Manipulation\n    appendTo(target: Cheerio) : Cheerio\n    prependTo(target: Cheerio) : Cheerio\n\n    append(content: string, ...contents: any[]): Cheerio;\n    append(content: Document, ...contents: any[]): Cheerio;\n    append(content: Document[], ...contents: any[]): Cheerio;\n    append(content: Cheerio, ...contents: any[]): Cheerio;\n\n    prepend(content: string, ...contents: any[]): Cheerio;\n    prepend(content: Document, ...contents: any[]): Cheerio;\n    prepend(content: Document[], ...contents: any[]): Cheerio;\n    prepend(content: Cheerio, ...contents: any[]): Cheerio;\n\n    after(content: string, ...contents: any[]): Cheerio;\n    after(content: Document, ...contents: any[]): Cheerio;\n    after(content: Document[], ...contents: any[]): Cheerio;\n    after(content: Cheerio, ...contents: any[]): Cheerio;\n\n    insertAfter(content: string): Cheerio;\n    insertAfter(content: Document): Cheerio;\n    insertAfter(content: Cheerio): Cheerio;\n\n    before(content: string, ...contents: any[]): Cheerio;\n    before(content: Document, ...contents: any[]): Cheerio;\n    before(content: Document[], ...contents: any[]): Cheerio;\n    before(content: Cheerio, ...contents: any[]): Cheerio;\n\n    insertBefore(content: string): Cheerio;\n    insertBefore(content: Document): Cheerio;\n    insertBefore(content: Cheerio): Cheerio;\n\n    remove(selector?: string): Cheerio;\n\n    replaceWith(content: string): Cheerio;\n    replaceWith(content: CheerioElement): Cheerio;\n    replaceWith(content: CheerioElement[]): Cheerio;\n    replaceWith(content: Cheerio): Cheerio;\n    replaceWith(content: () => Cheerio): Cheerio;\n\n    empty(): Cheerio;\n\n    html(): string | null;\n    html(html: string): Cheerio;\n\n    text(): string;\n    text(text: string): Cheerio;\n\n    // See https://github.com/cheeriojs/cheerio/issues/731\n    /*wrap(content: string): Cheerio;\n    wrap(content: Document): Cheerio;\n    wrap(content: Cheerio): Cheerio;*/\n\n    css(propertyName: string): string;\n    css(propertyNames: string[]): string[];\n    css(propertyName: string, value: string): Cheerio;\n    css(propertyName: string, value: number): Cheerio;\n    css(propertyName: string, func: (index: number, value: string) => string): Cheerio;\n    css(propertyName: string, func: (index: number, value: string) => number): Cheerio;\n    css(properties: Object): Cheerio;\n\n    // Rendering\n\n    // Miscellaneous\n\n    clone(): Cheerio;\n\n    // Not Documented\n\n    toArray(): CheerioElement[];\n}\n\ninterface CheerioOptionsInterface {\n    // Document References\n    // Cheerio https://github.com/cheeriojs/cheerio\n    // HTMLParser2 https://github.com/fb55/htmlparser2/wiki/Parser-options\n    // DomHandler https://github.com/fb55/DomHandler\n\n    xmlMode?: boolean;\n    decodeEntities?: boolean;\n    lowerCaseTags?: boolean;\n    lowerCaseAttributeNames?: boolean;\n    recognizeCDATA?: boolean;\n    recognizeSelfClosing?: boolean;\n    normalizeWhitespace?: boolean;\n}\n\ninterface CheerioSelector {\n    (selector: string): Cheerio;\n    (selector: string, context: string): Cheerio;\n    (selector: string, context: CheerioElement): Cheerio;\n    (selector: string, context: CheerioElement[]): Cheerio;\n    (selector: string, context: Cheerio): Cheerio;\n    (selector: string, context: string, root: string): Cheerio;\n    (selector: string, context: CheerioElement, root: string): Cheerio;\n    (selector: string, context: CheerioElement[], root: string): Cheerio;\n    (selector: string, context: Cheerio, root: string): Cheerio;\n    (selector: any): Cheerio;\n}\n\ninterface CheerioStatic extends CheerioSelector {\n    // Document References\n    // Cheerio https://github.com/cheeriojs/cheerio\n    // JQuery http://api.jquery.com\n    xml(): string;\n    root(): Cheerio;\n    contains(container: CheerioElement, contained: CheerioElement): boolean;\n    parseHTML(data: string, context?: Document, keepScripts?: boolean): Document[];\n\n    html(options?: CheerioOptionsInterface): string;\n    html(selector: string, options?: CheerioOptionsInterface): string;\n    html(element: Cheerio, options?: CheerioOptionsInterface): string;\n    html(element: CheerioElement, options?: CheerioOptionsInterface): string;\n}\n\ninterface CheerioElement {\n    // Document References\n    // Node Console\n    tagName: string;\n    type: string;\n    name: string;\n    attribs: {[attr: string]: string};\n    children: CheerioElement[];\n    childNodes: CheerioElement[];\n    lastChild: CheerioElement;\n    firstChild: CheerioElement;\n    next: CheerioElement;\n    nextSibling: CheerioElement;\n    prev: CheerioElement;\n    previousSibling: CheerioElement;\n    parent: CheerioElement;\n    parentNode: CheerioElement;\n    nodeValue: string;\n    data?: string;\n}\n\ninterface CheerioAPI extends CheerioSelector, CheerioStatic {\n  load(html: string, options?: CheerioOptionsInterface): CheerioStatic;\n  load(element: CheerioElement, options?: CheerioOptionsInterface): CheerioStatic;\n}\n\ninterface Document { }\n\ndeclare var cheerio:CheerioAPI;\n\ndeclare module \"cheerio\" {\n    export = cheerio;\n}\n",
          "typesLocation": "https://unpkg.com/@types/cheerio/index.d.ts"
        },
        "axios": {
          "name": "axios",
          "concatenatedName": "axios",
          "downloadsLast30Days": 6473928,
          "downloadsRatio": 0.03395493997581353,
          "humanDownloadsLast30Days": "6.5m",
          "popular": true,
          "version": "0.18.0",
          "versions": {
            "0.1.0": "2014-08-29T23:08:36.810Z",
            "0.2.0": "2014-09-12T20:06:33.167Z",
            "0.2.1": "2014-09-12T22:57:28.872Z",
            "0.2.2": "2014-09-15T03:30:45.994Z",
            "0.3.0": "2014-09-16T18:20:18.668Z",
            "0.3.1": "2014-09-17T00:31:29.538Z",
            "0.4.0": "2014-10-05T23:55:03.069Z",
            "0.4.1": "2014-10-15T18:19:42.549Z",
            "0.4.2": "2014-12-11T07:14:52.563Z",
            "0.5.0": "2015-01-23T10:15:47.657Z",
            "0.5.1": "2015-03-10T20:47:18.932Z",
            "0.5.2": "2015-03-13T23:14:22.809Z",
            "0.5.3": "2015-04-08T03:01:17.936Z",
            "0.5.4": "2015-04-08T18:49:41.745Z",
            "0.6.0": "2015-09-21T20:20:20.241Z",
            "0.7.0": "2015-09-29T06:36:55.850Z",
            "0.8.0": "2015-12-11T19:09:50.663Z",
            "0.8.1": "2015-12-15T03:44:16.229Z",
            "0.9.0": "2016-01-18T18:19:24.356Z",
            "0.9.1": "2016-01-24T22:19:01.689Z",
            "0.10.0": "2016-04-21T04:52:22.553Z",
            "0.11.0": "2016-04-27T04:19:52.831Z",
            "0.11.1": "2016-05-17T15:59:30.342Z",
            "0.12.0": "2016-06-01T05:22:58.397Z",
            "0.13.0": "2016-07-13T19:42:43.558Z",
            "0.13.1": "2016-07-16T17:13:24.859Z",
            "0.14.0": "2016-08-27T18:30:22.182Z",
            "0.15.0": "2016-10-11T04:40:41.633Z",
            "0.15.1": "2016-10-15T06:39:23.761Z",
            "0.15.2": "2016-10-18T01:33:20.989Z",
            "0.15.3": "2016-11-27T21:59:11.250Z",
            "0.16.0": "2017-04-01T02:31:09.040Z",
            "0.16.1": "2017-04-08T18:51:59.217Z",
            "0.16.2": "2017-06-03T19:29:23.765Z",
            "0.17.0": "2017-10-21T18:01:30.232Z",
            "0.17.1": "2017-11-11T23:24:40.635Z",
            "0.18.0": "2018-02-19T23:28:54.151Z"
          },
          "tags": {
            "latest": "0.18.0"
          },
          "description": "Promise based HTTP client for the browser and node.js",
          "dependencies": {
            "follow-redirects": "^1.3.0",
            "is-buffer": "^1.1.5"
          },
          "devDependencies": {
            "bundlesize": "^0.5.7",
            "coveralls": "^2.11.9",
            "es6-promise": "^4.0.5",
            "grunt": "^1.0.1",
            "grunt-banner": "^0.6.0",
            "grunt-cli": "^1.2.0",
            "grunt-contrib-clean": "^1.0.0",
            "grunt-contrib-nodeunit": "^1.0.0",
            "grunt-contrib-watch": "^1.0.0",
            "grunt-eslint": "^19.0.0",
            "grunt-karma": "^2.0.0",
            "grunt-ts": "^6.0.0-beta.3",
            "grunt-webpack": "^1.0.18",
            "istanbul-instrumenter-loader": "^1.0.0",
            "jasmine-core": "^2.4.1",
            "karma": "^1.3.0",
            "karma-chrome-launcher": "^2.0.0",
            "karma-coverage": "^1.0.0",
            "karma-firefox-launcher": "^1.0.0",
            "karma-jasmine": "^1.0.2",
            "karma-jasmine-ajax": "^0.1.13",
            "karma-opera-launcher": "^1.0.0",
            "karma-safari-launcher": "^1.0.0",
            "karma-sauce-launcher": "^1.1.0",
            "karma-sinon": "^1.0.5",
            "karma-sourcemap-loader": "^0.3.7",
            "karma-webpack": "^1.7.0",
            "load-grunt-tasks": "^3.5.2",
            "minimist": "^1.2.0",
            "sinon": "^1.17.4",
            "webpack": "^1.13.1",
            "webpack-dev-server": "^1.14.1",
            "url-search-params": "^0.6.1",
            "typescript": "^2.0.3"
          },
          "repository": {
            "url": "https://github.com/axios/axios",
            "project": "axios",
            "user": "axios",
            "host": "github.com",
            "path": "",
            "head": "d59c70fdfd35106130e9f783d0dbdcddd145b58f",
            "branch": "d59c70fdfd35106130e9f783d0dbdcddd145b58f"
          },
          "githubRepo": {
            "user": "axios",
            "project": "axios",
            "path": "",
            "head": "d59c70fdfd35106130e9f783d0dbdcddd145b58f"
          },
          "gitHead": "d59c70fdfd35106130e9f783d0dbdcddd145b58f",
          "readme": "# axios\n\n[![npm version](https://img.shields.io/npm/v/axios.svg?style=flat-square)](https://www.npmjs.org/package/axios)\n[![build status](https://img.shields.io/travis/axios/axios.svg?style=flat-square)](https://travis-ci.org/axios/axios)\n[![code coverage](https://img.shields.io/coveralls/mzabriskie/axios.svg?style=flat-square)](https://coveralls.io/r/mzabriskie/axios)\n[![npm downloads](https://img.shields.io/npm/dm/axios.svg?style=flat-square)](http://npm-stat.com/charts.html?package=axios)\n[![gitter chat](https://img.shields.io/gitter/room/mzabriskie/axios.svg?style=flat-square)](https://gitter.im/mzabriskie/axios)\n[![code helpers](https://www.codetriage.com/axios/axios/badges/users.svg)](https://www.codetriage.com/axios/axios)\n\nPromise based HTTP client for the browser and node.js\n\n## Features\n\n- Make [XMLHttpRequests](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest) from the browser\n- Make [http](http://nodejs.org/api/http.html) requests from node.js\n- Supports the [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) API\n- Intercept request and response\n- Transform request and response data\n- Cancel requests\n- Automatic transforms for JSON data\n- Client side support for protecting against [XSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery)\n\n## Browser Support\n\n![Chrome](https://raw.github.com/alrra/browser-logos/master/src/chrome/chrome_48x48.png) | ![Firefox](https://raw.github.com/alrra/browser-logos/master/src/firefox/firefox_48x48.png) | ![Safari](https://raw.github.com/alrra/browser-logos/master/src/safari/safari_48x48.png) | ![Opera](https://raw.github.com/alrra/browser-logos/master/src/opera/opera_48x48.png) | ![Edge](https://raw.github.com/alrra/browser-logos/master/src/edge/edge_48x48.png) | ![IE](https://raw.github.com/alrra/browser-logos/master/src/archive/internet-explorer_9-11/internet-explorer_9-11_48x48.png) |\n--- | --- | --- | --- | --- | --- |\nLatest ÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂ¢ÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂ | Latest ÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂ¢ÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂ | Latest ÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂ¢ÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂ | Latest ÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂ¢ÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂ | Latest ÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂ¢ÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂ | 8+ ÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂ¢ÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂ |\n\n[![Browser Matrix](https://saucelabs.com/open_sauce/build_matrix/axios.svg)](https://saucelabs.com/u/axios)\n\n## Installing\n\nUsing npm:\n\n```bash\n$ npm install axios\n```\n\nUsing bower:\n\n```bash\n$ bower install axios\n```\n\nUsing cdn:\n\n```html\n<script src=\"https://unpkg.com/axios/dist/axios.min.js\"></script>\n```\n\n## Example\n\nPerforming a `GET` request\n\n```js\n// Make a request for a user with a given ID\naxios.get('/user?ID=12345')\n  .then(function (response) {\n    console.log(response);\n  })\n  .catch(function (error) {\n    console.log(error);\n  });\n\n// Optionally the request above could also be done as\naxios.get('/user', {\n    params: {\n      ID: 12345\n    }\n  })\n  .then(function (response) {\n    console.log(response);\n  })\n  .catch(function (error) {\n    console.log(error);\n  });\n```\n\nPerforming a `POST` request\n\n```js\naxios.post('/user', {\n    firstName: 'Fred',\n    lastName: 'Flintstone'\n  })\n  .then(function (response) {\n    console.log(response);\n  })\n  .catch(function (error) {\n    console.log(error);\n  });\n```\n\nPerforming multiple concurrent requests\n\n```js\nfunction getUserAccount() {\n  return axios.get('/user/12345');\n}\n\nfunction getUserPermissions() {\n  return axios.get('/user/12345/permissions');\n}\n\naxios.all([getUserAccount(), getUserPermissions()])\n  .then(axios.spread(function (acct, perms) {\n    // Both requests are now complete\n  }));\n```\n\n## axios API\n\nRequests can be made by passing the relevant config to `axios`.\n\n##### axios(config)\n\n```js\n// Send a POST request\naxios({\n  method: 'post',\n  url: '/user/12345',\n  data: {\n    firstName: 'Fred',\n    lastName: 'Flintstone'\n  }\n});\n```\n\n```js\n// GET request for remote image\naxios({\n  method:'get',\n  url:'http://bit.ly/2mTM3nY',\n  responseType:'stream'\n})\n  .then(function(response) {\n  response.data.pipe(fs.createWriteStream('ada_lovelace.jpg'))\n});\n```\n\n##### axios(url[, config])\n\n```js\n// Send a GET request (default method)\naxios('/user/12345');\n```\n\n### Request method aliases\n\nFor convenience aliases have been provided for all supported request methods.\n\n##### axios.request(config)\n##### axios.get(url[, config])\n##### axios.delete(url[, config])\n##### axios.head(url[, config])\n##### axios.options(url[, config])\n##### axios.post(url[, data[, config]])\n##### axios.put(url[, data[, config]])\n##### axios.patch(url[, data[, config]])\n\n###### NOTE\nWhen using the alias methods `url`, `method`, and `data` properties don't need to be specified in config.\n\n### Concurrency\n\nHelper functions for dealing with concurrent requests.\n\n##### axios.all(iterable)\n##### axios.spread(callback)\n\n### Creating an instance\n\nYou can create a new instance of axios with a custom config.\n\n##### axios.create([config])\n\n```js\nvar instance = axios.create({\n  baseURL: 'https://some-domain.com/api/',\n  timeout: 1000,\n  headers: {'X-Custom-Header': 'foobar'}\n});\n```\n\n### Instance methods\n\nThe available instance methods are listed below. The specified config will be merged with the instance config.\n\n##### axios#request(config)\n##### axios#get(url[, config])\n##### axios#delete(url[, config])\n##### axios#head(url[, config])\n##### axios#options(url[, config])\n##### axios#post(url[, data[, config]])\n##### axios#put(url[, data[, config]])\n##### axios#patch(url[, data[, config]])\n\n## Request Config\n\nThese are the available config options for making requests. Only the `url` is required. Requests will default to `GET` if `method` is not specified.\n\n```js\n{\n  // `url` is the server URL that will be used for the request\n  url: '/user',\n\n  // `method` is the request method to be used when making the request\n  method: 'get', // default\n\n  // `baseURL` will be prepended to `url` unless `url` is absolute.\n  // It can be convenient to set `baseURL` for an instance of axios to pass relative URLs\n  // to methods of that instance.\n  baseURL: 'https://some-domain.com/api/',\n\n  // `transformRequest` allows changes to the request data before it is sent to the server\n  // This is only applicable for request methods 'PUT', 'POST', and 'PATCH'\n  // The last function in the array must return a string or an instance of Buffer, ArrayBuffer,\n  // FormData or Stream\n  // You may modify the headers object.\n  transformRequest: [function (data, headers) {\n    // Do whatever you want to transform the data\n\n    return data;\n  }],\n\n  // `transformResponse` allows changes to the response data to be made before\n  // it is passed to then/catch\n  transformResponse: [function (data) {\n    // Do whatever you want to transform the data\n\n    return data;\n  }],\n\n  // `headers` are custom headers to be sent\n  headers: {'X-Requested-With': 'XMLHttpRequest'},\n\n  // `params` are the URL parameters to be sent with the request\n  // Must be a plain object or a URLSearchParams object\n  params: {\n    ID: 12345\n  },\n\n  // `paramsSerializer` is an optional function in charge of serializing `params`\n  // (e.g. https://www.npmjs.com/package/qs, http://api.jquery.com/jquery.param/)\n  paramsSerializer: function(params) {\n    return Qs.stringify(params, {arrayFormat: 'brackets'})\n  },\n\n  // `data` is the data to be sent as the request body\n  // Only applicable for request methods 'PUT', 'POST', and 'PATCH'\n  // When no `transformRequest` is set, must be of one of the following types:\n  // - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams\n  // - Browser only: FormData, File, Blob\n  // - Node only: Stream, Buffer\n  data: {\n    firstName: 'Fred'\n  },\n\n  // `timeout` specifies the number of milliseconds before the request times out.\n  // If the request takes longer than `timeout`, the request will be aborted.\n  timeout: 1000,\n\n  // `withCredentials` indicates whether or not cross-site Access-Control requests\n  // should be made using credentials\n  withCredentials: false, // default\n\n  // `adapter` allows custom handling of requests which makes testing easier.\n  // Return a promise and supply a valid response (see lib/adapters/README.md).\n  adapter: function (config) {\n    /* ... */\n  },\n\n  // `auth` indicates that HTTP Basic auth should be used, and supplies credentials.\n  // This will set an `Authorization` header, overwriting any existing\n  // `Authorization` custom headers you have set using `headers`.\n  auth: {\n    username: 'janedoe',\n    password: 's00pers3cret'\n  },\n\n  // `responseType` indicates the type of data that the server will respond with\n  // options are 'arraybuffer', 'blob', 'document', 'json', 'text', 'stream'\n  responseType: 'json', // default\n\n  // `xsrfCookieName` is the name of the cookie to use as a value for xsrf token\n  xsrfCookieName: 'XSRF-TOKEN', // default\n\n  // `xsrfHeaderName` is the name of the http header that carries the xsrf token value\n  xsrfHeaderName: 'X-XSRF-TOKEN', // default\n\n  // `onUploadProgress` allows handling of progress events for uploads\n  onUploadProgress: function (progressEvent) {\n    // Do whatever you want with the native progress event\n  },\n\n  // `onDownloadProgress` allows handling of progress events for downloads\n  onDownloadProgress: function (progressEvent) {\n    // Do whatever you want with the native progress event\n  },\n\n  // `maxContentLength` defines the max size of the http response content allowed\n  maxContentLength: 2000,\n\n  // `validateStatus` defines whether to resolve or reject the promise for a given\n  // HTTP response status code. If `validateStatus` returns `true` (or is set to `null`\n  // or `undefined`), the promise will be resolved; otherwise, the promise will be\n  // rejected.\n  validateStatus: function (status) {\n    return status >= 200 && status < 300; // default\n  },\n\n  // `maxRedirects` defines the maximum number of redirects to follow in node.js.\n  // If set to 0, no redirects will be followed.\n  maxRedirects: 5, // default\n\n  // `socketPath` defines a UNIX Socket to be used in node.js.\n  // e.g. '/var/run/docker.sock' to send requests to the docker daemon.\n  // Only either `socketPath` or `proxy` can be specified.\n  // If both are specified, `socketPath` is used.\n  socketPath: null, // default\n\n  // `httpAgent` and `httpsAgent` define a custom agent to be used when performing http\n  // and https requests, respectively, in node.js. This allows options to be added like\n  // `keepAlive` that are not enabled by default.\n  httpAgent: new http.Agent({ keepAlive: true }),\n  httpsAgent: new https.Agent({ keepAlive: true }),\n\n  // 'proxy' defines the hostname and port of the proxy server\n  // Use `false` to disable proxies, ignoring environment variables.\n  // `auth` indicates that HTTP Basic auth should be used to connect to the proxy, and\n  // supplies credentials.\n  // This will set an `Proxy-Authorization` header, overwriting any existing\n  // `Proxy-Authorization` custom headers you have set using `headers`.\n  proxy: {\n    host: '127.0.0.1',\n    port: 9000,\n    auth: {\n      username: 'mikeymike',\n      password: 'rapunz3l'\n    }\n  },\n\n  // `cancelToken` specifies a cancel token that can be used to cancel the request\n  // (see Cancellation section below for details)\n  cancelToken: new CancelToken(function (cancel) {\n  })\n}\n```\n\n## Response Schema\n\nThe response for a request contains the following information.\n\n```js\n{\n  // `data` is the response that was provided by the server\n  data: {},\n\n  // `status` is the HTTP status code from the server response\n  status: 200,\n\n  // `statusText` is the HTTP status message from the server response\n  statusText: 'OK',\n\n  // `headers` the headers that the server responded with\n  // All header names are lower cased\n  headers: {},\n\n  // `config` is the config that was provided to `axios` for the request\n  config: {},\n\n  // `request` is the request that generated this response\n  // It is the last ClientRequest instance in node.js (in redirects)\n  // and an XMLHttpRequest instance the browser\n  request: {}\n}\n```\n\nWhen using `then`, you will receive the response as follows:\n\n```js\naxios.get('/user/12345')\n  .then(function(response) {\n    console.log(response.data);\n    console.log(response.status);\n    console.log(response.statusText);\n    console.log(response.headers);\n    console.log(response.config);\n  });\n```\n\nWhen using `catch`, or passing a [rejection callback](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then) as second parameter of `then`, the response will be available through the `error` object as explained in the [Handling Errors](#handling-errors) section.\n\n## Config Defaults\n\nYou can specify config defaults that will be applied to every request.\n\n### Global axios defaults\n\n```js\naxios.defaults.baseURL = 'https://api.example.com';\naxios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\n```\n\n### Custom instance defaults\n\n```js\n// Set config defaults when creating the instance\nvar instance = axios.create({\n  baseURL: 'https://api.example.com'\n});\n\n// Alter defaults after instance has been created\ninstance.defaults.headers.common['Authorization'] = AUTH_TOKEN;\n```\n\n### Config order of precedence\n\nConfig will be merged with an order of precedence. The order is library defaults found in [lib/defaults.js](https://github.com/axios/axios/blob/master/lib/defaults.js#L28), then `defaults` property of the instance, and finally `config` argument for the request. The latter will take precedence over the former. Here's an example.\n\n```js\n// Create an instance using the config defaults provided by the library\n// At this point the timeout config value is `0` as is the default for the library\nvar instance = axios.create();\n\n// Override timeout default for the library\n// Now all requests will wait 2.5 seconds before timing out\ninstance.defaults.timeout = 2500;\n\n// Override timeout for this request as it's known to take a long time\ninstance.get('/longRequest', {\n  timeout: 5000\n});\n```\n\n## Interceptors\n\nYou can intercept requests or responses before they are handled by `then` or `catch`.\n\n```js\n// Add a request interceptor\naxios.interceptors.request.use(function (config) {\n    // Do something before request is sent\n    return config;\n  }, function (error) {\n    // Do something with request error\n    return Promise.reject(error);\n  });\n\n// Add a response interceptor\naxios.interceptors.response.use(function (response) {\n    // Do something with response data\n    return response;\n  }, function (error) {\n    // Do something with response error\n    return Promise.reject(error);\n  });\n```\n\nIf you may need to remove an interceptor later you can.\n\n```js\nvar myInterceptor = axios.interceptors.request.use(function () {/*...*/});\naxios.interceptors.request.eject(myInterceptor);\n```\n\nYou can add interceptors to a custom instance of axios.\n\n```js\nvar instance = axios.create();\ninstance.interceptors.request.use(function () {/*...*/});\n```\n\n## Handling Errors\n\n```js\naxios.get('/user/12345')\n  .catch(function (error) {\n    if (error.response) {\n      // The request was made and the server responded with a status code\n      // that falls out of the range of 2xx\n      console.log(error.response.data);\n      console.log(error.response.status);\n      console.log(error.response.headers);\n    } else if (error.request) {\n      // The request was made but no response was received\n      // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n      // http.ClientRequest in node.js\n      console.log(error.request);\n    } else {\n      // Something happened in setting up the request that triggered an Error\n      console.log('Error', error.message);\n    }\n    console.log(error.config);\n  });\n```\n\nYou can define a custom HTTP status code error range using the `validateStatus` config option.\n\n```js\naxios.get('/user/12345', {\n  validateStatus: function (status) {\n    return status < 500; // Reject only if the status code is greater than or equal to 500\n  }\n})\n```\n\n## Cancellation\n\nYou can cancel a request using a *cancel token*.\n\n> The axios cancel token API is based on the withdrawn [cancelable promises proposal](https://github.com/tc39/proposal-cancelable-promises).\n\nYou can create a cancel token using the `CancelToken.source` factory as shown below:\n\n```js\nvar CancelToken = axios.CancelToken;\nvar source = CancelToken.source();\n\naxios.get('/user/12345', {\n  cancelToken: source.token\n}).catch(function(thrown) {\n  if (axios.isCancel(thrown)) {\n    console.log('Request canceled', thrown.message);\n  } else {\n    // handle error\n  }\n});\n\naxios.post('/user/12345', {\n  name: 'new name'\n}, {\n  cancelToken: source.token\n})\n\n// cancel the request (the message parameter is optional)\nsource.cancel('Operation canceled by the user.');\n```\n\nYou can also create a cancel token by passing an executor function to the `CancelToken` constructor:\n\n```js\nvar CancelToken = axios.CancelToken;\nvar cancel;\n\naxios.get('/user/12345', {\n  cancelToken: new CancelToken(function executor(c) {\n    // An executor function receives a cancel function as a parameter\n    cancel = c;\n  })\n});\n\n// cancel the request\ncancel();\n```\n\n> Note: you can cancel several requests with the same cancel token.\n\n## Using application/x-www-form-urlencoded format\n\nBy default, axios serializes JavaScript objects to `JSON`. To send data in the `application/x-www-form-urlencoded` format instead, you can use one of the following options.\n\n### Browser\n\nIn a browser, you can use the [`URLSearchParams`](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams) API as follows:\n\n```js\nvar params = new URLSearchParams();\nparams.append('param1', 'value1');\nparams.append('param2', 'value2');\naxios.post('/foo', params);\n```\n\n> Note that `URLSearchParams` is not supported by all browsers (see [caniuse.com](http://www.caniuse.com/#feat=urlsearchparams)), but there is a [polyfill](https://github.com/WebReflection/url-search-params) available (make sure to polyfill the global environment).\n\nAlternatively, you can encode data using the [`qs`](https://github.com/ljharb/qs) library:\n\n```js\nvar qs = require('qs');\naxios.post('/foo', qs.stringify({ 'bar': 123 }));\n```\n\n### Node.js\n\nIn node.js, you can use the [`querystring`](https://nodejs.org/api/querystring.html) module as follows:\n\n```js\nvar querystring = require('querystring');\naxios.post('http://something.com/', querystring.stringify({ foo: 'bar' }));\n```\n\nYou can also use the [`qs`](https://github.com/ljharb/qs) library.\n\n## Semver\n\nUntil axios reaches a `1.0` release, breaking changes will be released with a new minor version. For example `0.5.1`, and `0.5.4` will have the same API, but `0.6.0` will have breaking changes.\n\n## Promises\n\naxios depends on a native ES6 Promise implementation to be [supported](http://caniuse.com/promises).\nIf your environment doesn't support ES6 Promises, you can [polyfill](https://github.com/jakearchibald/es6-promise).\n\n## TypeScript\naxios includes [TypeScript](http://typescriptlang.org) definitions.\n```typescript\nimport axios from 'axios';\naxios.get('/user?ID=12345');\n```\n\n## Resources\n\n* [Changelog](https://github.com/axios/axios/blob/master/CHANGELOG.md)\n* [Upgrade Guide](https://github.com/axios/axios/blob/master/UPGRADE_GUIDE.md)\n* [Ecosystem](https://github.com/axios/axios/blob/master/ECOSYSTEM.md)\n* [Contributing Guide](https://github.com/axios/axios/blob/master/CONTRIBUTING.md)\n* [Code of Conduct](https://github.com/axios/axios/blob/master/CODE_OF_CONDUCT.md)\n\n## Credits\n\naxios is heavily inspired by the [$http service](https://docs.angularjs.org/api/ng/service/$http) provided in [Angular](https://angularjs.org/). Ultimately axios is an effort to provide a standalone `$http`-like service for use outside of Angular.\n\n## License\n\nMIT\n",
          "owner": {
            "name": "axios",
            "avatar": "https://github.com/axios.png",
            "link": "https://github.com/axios"
          },
          "deprecated": false,
          "badPackage": false,
          "homepage": null,
          "license": "MIT",
          "keywords": [
            "xhr",
            "http",
            "ajax",
            "promise",
            "node"
          ],
          "created": 1409353716810,
          "modified": 1521530486949,
          "lastPublisher": {
            "name": "emilyemorehouse",
            "email": "emilyemorehouse@gmail.com",
            "avatar": "https://gravatar.com/avatar/8bd5c7e278d89616b381107f33d9ba9c",
            "link": "https://www.npmjs.com/~emilyemorehouse"
          },
          "owners": [
            {
              "name": "mzabriskie",
              "email": "mzabriskie@gmail.com",
              "avatar": "https://gravatar.com/avatar/eb1b97d30df2c314fa4bc90c92f9768c",
              "link": "https://www.npmjs.com/~mzabriskie"
            },
            {
              "name": "nickuraltsev",
              "email": "nick.uraltsev@gmail.com",
              "avatar": "https://gravatar.com/avatar/fc0b308a8511639f1ddd42cf81feb6b5",
              "link": "https://www.npmjs.com/~nickuraltsev"
            }
          ],
          "lastCrawl": "2018-03-20T09:09:19.283Z",
          "popularName": "axios",
          "dependents": 4666,
          "humanDependents": "4.7k",
          "changelogFilename": "https://raw.githubusercontent.com/axios/axios/d59c70fdfd35106130e9f783d0dbdcddd145b58f/CHANGELOG.md",
          "objectID": "axios",
          "_highlightResult": {
            "name": {
              "value": "<em>axios</em>",
              "matchLevel": "full",
              "fullyHighlighted": true,
              "matchedWords": [
                "axios"
              ]
            },
            "concatenatedName": {
              "value": "<em>axios</em>",
              "matchLevel": "full",
              "fullyHighlighted": true,
              "matchedWords": [
                "axios"
              ]
            },
            "description": {
              "value": "Promise based HTTP client for the browser and node.js",
              "matchLevel": "none",
              "matchedWords": []
            },
            "owner": {
              "name": {
                "value": "<em>axios</em>",
                "matchLevel": "full",
                "fullyHighlighted": true,
                "matchedWords": [
                  "axios"
                ]
              }
            },
            "keywords": [
              {
                "value": "xhr",
                "matchLevel": "none",
                "matchedWords": []
              },
              {
                "value": "http",
                "matchLevel": "none",
                "matchedWords": []
              },
              {
                "value": "ajax",
                "matchLevel": "none",
                "matchedWords": []
              },
              {
                "value": "promise",
                "matchLevel": "none",
                "matchedWords": []
              },
              {
                "value": "node",
                "matchLevel": "none",
                "matchedWords": []
              }
            ],
            "owners": [
              {
                "name": {
                  "value": "mzabriskie",
                  "matchLevel": "none",
                  "matchedWords": []
                }
              },
              {
                "name": {
                  "value": "nickuraltsev",
                  "matchLevel": "none",
                  "matchedWords": []
                }
              }
            ],
            "popularName": {
              "value": "<em>axios</em>",
              "matchLevel": "full",
              "fullyHighlighted": true,
              "matchedWords": [
                "axios"
              ]
            }
          }
        }
      }
    },
    "lambdaId": "7125ce41-693a-42d2-b393-e0d8f1ed4ffe",
    "additionalFiles": []
  },
  "PROJECT_META": {
    "projectName": "hero-hub",
    "projectDescription": "gathers AWS community hero details",
    "projectVersion": "1.0.0",
    "projectRegion": "us-east-1",
    "repoName": "hero-hub",
    "repoUrl": "https://github.com/janakaud/hero-hub",
    "lastSave": 1522154151006
  }
}